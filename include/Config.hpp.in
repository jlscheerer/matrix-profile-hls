/**
 * @file    MatrixProfile.hpp
 * @author  Jan Luca Scheerer (scheerer@cs.tum.edu)
 * @brief   Kernel Implementation Definition, Constant Definitions (n, m) and Type Aliases (data_t, index_t)
 */

#pragma once

#include <cstdlib>
#include <ap_fixed.h>

#include "AggregateTypeTraits.hpp"

// Arbitrary Precision Fixed-Point Data Type - Definitions
// For More Information visit https://www.xilinx.com/html_docs/xilinx2020_2/vitis_doc/use_arbitrary_precision_data_type.html

// 16 bit Arbitrary Precision Fixed-Point Data Type
// 5 bits (incl. sign) for integral part; 11 bits for fractional part
// AP_RND_ZERO=Round to zero; AP_WRAP_SM=Sign magnitude wrap around
// [-16, 15] . (2048 / 2047)
using ap16_t = ap_fixed<16, 5, AP_RND_ZERO, AP_WRAP_SM>;

// 24 bit Arbitrary Precision Fixed-Point Data Type
// 8 bits (incl. sign) for integral part; 16 bits for fractional part
// AP_RND_ZERO=Round to zero; AP_WRAP_SM=Sign magnitude wrap around
// [-128, 127] . (65535 / 65536)
using ap24_t = ap_fixed<24, 8, AP_RND_ZERO, AP_WRAP_SM>;

// 32 bit Arbitrary Precision Fixed-Point Data Type
// 11 bits (incl. sign) for integral part; 21 bits for fractional part
// AP_RND_ZERO=Round to zero; AP_WRAP_SM=Sign magnitude wrap around
// [-1024, 1023] . (2097151 / 2097152)
using ap32_t = ap_fixed<32, 11, AP_RND_ZERO, AP_WRAP_SM>;

// 64 bit Arbitrary Precision Fixed-Point Data Type
// 14 bits (incl. sign) for integral part; 50 bits for fractional part
// AP_RND_ZERO=Round to zero; AP_WRAP_SM=Sign magnitude wrap around
// [-8192, 8191] . (1125899906842623.0 / 1125899906842624)
using ap64_t = ap_fixed<64, 14, AP_RND_ZERO, AP_WRAP_SM>;

// type alias for time series & resulting matrix profile
using data_t = ${MP_DATA_TYPE};

// type alias for the resulting matrix profile index
using index_t = ${MP_INDEX_TYPE};

// length of the time series data
static constexpr index_t n = ${MP_SIZE_N};

// subsequence length for the matrix profile
static constexpr index_t m = ${MP_SIZE_M};

// "tile-size" (only applicable for Stream2D)
// assumption: t â‰¥ m
static constexpr index_t t = ${MP_SIZE_T};

// length of the resulting matrix profile (index)
static constexpr index_t sublen = n - m + 1;

// "negative infinity" used to initialize aggregates
static const data_t aggregate_init = AggregateInit<data_t>::value;

// used to indicate an invalid/undetermined index
static const index_t index_init = IndexInit<index_t>::value;

// "translate" the selected kernel implementation (type) to a readable string
#define KERNEL_IMPL_NAME "v${MP_KERNEL}"