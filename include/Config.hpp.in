/**
 * @file    MatrixProfile.hpp
 * @author  Jan Luca Scheerer (scheerer@cs.tum.edu)
 * @brief   Kernel Implementation Definition, Constant Definitions (n, m) and Type Aliases (data_t, index_t)
 */

#pragma once

#include <cstdlib>
#include <ap_fixed.h>

// 8-bit variable with 6 bits representing the numbers above the decimal point
// and 12-bits representing the value below the decimal point
using ap1 = ap_fixed<18, 6, AP_RND>;

// type alias for time series & resulting matrix profile
using data_t = ${MP_DATA_TYPE};

// type alias for the resulting matrix profile index
using index_t = ${MP_INDEX_TYPE};

// length of the time series data
static constexpr index_t n = ${MP_SIZE_N};

// subsequence length for the matrix profile
static constexpr index_t m = ${MP_SIZE_M};

// "tile-size" (only applicable for Stream2D)
// assumption: t â‰¥ m
static constexpr index_t t = ${MP_SIZE_T};

// length of the resulting matrix profile (index)
static constexpr index_t sublen = n - m + 1;

namespace MatrixProfileConfig {
    
    template<typename T>
    static const T AggregateInit();

    template<>
    const double AggregateInit() { return -1e12; }

    template<>
    const float AggregateInit() { return -1e12; }

    template<>
    const ap1 AggregateInit() { return -62; }

    template<typename T>
    static const T IndexInit();

    template<>
    const int IndexInit() { return -1; }

}

// "negative infinity" used to initialize aggregates
static const data_t aggregate_init = MatrixProfileConfig::AggregateInit<data_t>();

// used to indicate an invalid/undetermined index
static const index_t index_init = MatrixProfileConfig::IndexInit<index_t>();

// "translate" the selected kernel implementation (type) to a readable string
#define KERNEL_IMPL_NAME "v${MP_KERNEL}"